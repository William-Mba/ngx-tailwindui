{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let ThemeService = /*#__PURE__*/(() => {\n  class ThemeService {\n    constructor() {\n      this._themeStore = localStorage;\n      this._lightElementIds = ['logo-light-icon', 'search-light-icon', 'theme-toggle-light-icon', 'footer-theme-light-logo'];\n      this._darkElementIds = ['logo-dark-icon', 'search-dark-icon', 'theme-toggle-dark-icon', 'footer-theme-dark-logo'];\n    }\n    toggleDarkTheme() {\n      if (this.isDarken()) {\n        this.hideDarkDisplayLight();\n      } else {\n        this.hideLightDisplayDark();\n      }\n    }\n    initializeSettings() {\n      const previousSetting = this._themeStore.getItem(Theme.preference);\n      switch (previousSetting) {\n        case Theme.light:\n          this.hideDarkDisplayLight();\n          break;\n        case Theme.dark:\n          this.hideLightDisplayDark();\n          break;\n      }\n      const darkTheme = window.matchMedia(\"(prefers-color-scheme: dark)\");\n      if (darkTheme.matches) {\n        this.hideLightDisplayDark();\n      } else {\n        this.hideDarkDisplayLight();\n      }\n    }\n    isDarken() {\n      return document.documentElement.classList.contains(Theme.dark);\n    }\n    hideDarkDisplayLight() {\n      this.hideElementsById(this._darkElementIds);\n      this.displayElementsById(this._lightElementIds);\n      document.documentElement.classList.remove(Theme.dark);\n      this._themeStore.setItem(Theme.preference, Theme.light);\n    }\n    hideLightDisplayDark() {\n      this.hideElementsById(this._lightElementIds);\n      this.displayElementsById(this._darkElementIds);\n      document.documentElement.classList.add(Theme.dark);\n      this._themeStore.setItem(Theme.preference, Theme.dark);\n    }\n    display(elements) {\n      elements.forEach(e => {\n        if (e?.classList.contains('hidden')) {\n          e?.classList.remove('hidden');\n        }\n      });\n    }\n    hide(elements) {\n      elements.forEach(e => {\n        if (!e?.classList.contains('hidden')) {\n          e?.classList.add('hidden');\n        }\n      });\n    }\n    toggleClass(token, elements, force) {\n      if (force != undefined) {\n        elements.forEach(e => {\n          e?.classList.toggle(token, force);\n        });\n        return;\n      }\n      elements.forEach(e => {\n        e?.classList.toggle(token);\n      });\n    }\n    hideElementsById(ids) {\n      let elements = [];\n      ids.forEach(id => {\n        const e = document.getElementById(id);\n        if (e != null) {\n          elements.push(e);\n        }\n      });\n      this.hide(elements);\n    }\n    displayElementsById(ids) {\n      let elements = [];\n      ids.forEach(id => {\n        const e = document.getElementById(id);\n        if (e != null) {\n          elements.push(e);\n        }\n      });\n      this.display(elements);\n    }\n    getElementsById(ids) {\n      let elements = [];\n      ids.forEach(id => {\n        const e = document.getElementById(id);\n        if (e != null) {\n          elements.push(e);\n        }\n      });\n      return elements;\n    }\n    static #_ = this.ɵfac = function ThemeService_Factory(t) {\n      return new (t || ThemeService)();\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ThemeService,\n      factory: ThemeService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ThemeService;\n})();\nvar Theme = /*#__PURE__*/function (Theme) {\n  Theme[\"preference\"] = \"prefered-theme-color\";\n  Theme[\"dark\"] = \"dark\";\n  Theme[\"light\"] = \"light\";\n  return Theme;\n}(Theme || {});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}